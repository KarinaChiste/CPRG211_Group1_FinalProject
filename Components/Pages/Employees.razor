@page "/employees"
@using CPRG211_Group1_FinalProject.Classes
<h3 style="text-align: center;">Search Employees</h3>

<form class="d-flex gap-4">
	<div style="width: 30%">
		<label> Employee ID: </label>
		<input class="form-control" @bind="id" />
	</div>

	<div style="width: 30%" >
		<label> First Name: </label>
		<input class="form-control" @bind="employeefirstname" />
	</div>

	<div style="width: 30%;">
		<label>Item Type:</label>
		<select class="form-control" style="width: 100%;" @bind="type">
			<option value="">Select Type</option>
			<option>Kitchen Staff</option>
			<option>Front of House</option>
		</select>
	</div>

	<div class="align-self-end flex-grow-1" style="width: 190px;">
		<button type="button" class="btn btn-primary w-100"
		style="white-space: nowrap;" @onclick="FindEmployees">
			Search Employees
		</button>
	</div>

</form>

@* dropdown list *@
<div class="form-group pt-3">
	<select class="form-select" @onchange="EmployeeClick">

		@foreach (Employee employee in employees)
		{
			if (chosenEmployee == 1)
			{
				<option selected value="@employee"> @employee.ToString() </option>
			}
			else
			{
				<option value="@employee">@employee.ToString()</option>
			}
		}

	</select>
</div>

@* employee info *@
<div style="display: flex; flex-direction: column; align-items: center;">
	<div style="padding-top:10px">
		<label>Employee ID: </label> <br />
		<input type="text" placeholder="Employee ID" style="width:100%" readonly	 value="@employeeid"/>

	</div>

	<div style="padding-top:10px">
		<label>First Name: </label> <br />
		<input type="text" placeholder="First Name" style="width:100%" readonly value="@firstname" />
	</div>

	<div style="padding-top:10px">
		<label>Last Name: </label> <br />
		<input type="text" placeholder="Last Name" style="width:100%" readonly value="@lastname" />
	</div>

	<div style="padding-top:10px">
		<label>Position: </label> <br />
		<input type="text" placeholder="Position" style="width:100%" readonly  value="@position"/>
	</div>

	<div style="padding-top:10px">
		<label>Salary: </label> <br />
		<input type="text" placeholder="Salary" style="width:100%" readonly value="@salary"/>
	</div>

	<div style="padding-top:10px">
		<label>Start Date: </label> <br />
		<input type="text" placeholder="Start Date" style="width:100%" readonly value="@startdate" />
	</div>

	<div style="padding-top:10px;">
		<label>Hours: </label> <br />
		<input type="text" placeholder="Hours" style="width:100%" readonly value="@hours"/>
	</div>

	<div style="padding-top:10px; padding-bottom:30px">
		<label>Staff Type: </label> <br />
		<input type="text" style="width:100%;" placeholder="Staff Type"  readonly value="@stafftype" />
	</div>
</div>


<h3 style="text-align: center;">Manage Employees</h3>
@* add and remove buttons *@
<form class="d-flex gap-4" style="padding-bottom: 10px;">

	<a href="/addemployees" class="btn btn-primary w-100" style="white-space: nowrap; ">
			Add New Employee
	</a>


@* 	<a href="/editemployees">
		<button type="button" class="btn btn-primary w-100"
		style="white-space: nowrap; ">
			Edit Employee
		</button>
	</a>
 *@
@* 	<a href="/removeemployees">
		<button type="button" class="btn btn-primary w-100"
		style="white-space: nowrap;" >
			Remove Employee
		</button>
	</a> *@

	<button class="btn btn-danger w-100" style="white-space: nowrap;" @onclick="DeleteEmployee">
		Remove Current Employee
	</button>
</form>



@code {

	private string id;
	private string employeefirstname;
	private string type;

	private string employeeid;
	private string firstname;
	private string lastname;
	private string position;
	private string startdate;
	private string salary;
	private string hours;
	private string stafftype;

	public int chosenEmployee = 1;
	public string[] employeeDetails;

	private List<Employee> employees = new List<Employee>();
	private EmployeeManager employeeManager = new EmployeeManager();
	private EmployeeDbAccessor database = new EmployeeDbAccessor();

	private void FindEmployees()
	{


		if (string.IsNullOrWhiteSpace(id) && string.IsNullOrWhiteSpace(employeefirstname) && string.IsNullOrWhiteSpace(type))
		{
			return;
		}
		if (string.IsNullOrWhiteSpace(id))
		{
			id = null;	
		}
		if (string.IsNullOrWhiteSpace(employeefirstname))
		{
			employeefirstname = null;
		}
		if (string.IsNullOrWhiteSpace(type))
		{
			type = null;
		}
		employees = database.GetEmployees(id,employeefirstname,type);
		if (employees.Count != 0)
		{
			EmployeeSet(employees[employees.Count - 1].ToString());
		}
	}

	public void EmployeeClick(ChangeEventArgs arg1)
	{
		if(arg1.Value is not null)
		{
			string myEmployee = (string)arg1.Value;
			EmployeeSet(myEmployee);
		}
	}

	public void EmployeeSet(string theEmployee)
	{
		if(theEmployee.Length != 0)
		{
			employeeDetails = theEmployee.Split(",");
			employeeid = employeeDetails[0];
			firstname = employeeDetails[1];
			lastname = employeeDetails[2];
			position = employeeDetails[3];
			salary = employeeDetails[4];
			startdate = employeeDetails[5];
			hours = employeeDetails[6];
			stafftype = employeeDetails[7];

		}
	}

	public void DeleteEmployee()
	{
		database.RemoveEmployee(employeeid);
	}

}
